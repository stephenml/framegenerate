package %|group|%.core.mongo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.data.mongodb.core.query.Update;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.data.repository.NoRepositoryBean;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

@NoRepositoryBean
public abstract class BaseRepository<T extends BaseDocument, ID extends Serializable> implements MongoRepository<T, ID> {

    @Autowired
    protected MongoTemplate mongoTemplate;

    @Override
    public <S extends T> S save(S entity) {
        if (null != entity.getId()) {
            this.update(entity);
        } else {
            this.mongoTemplate.insert(entity);
        }
        return entity;
    }

    @Override
    public <S extends T> List<S> save(Iterable<S> entities) {
        List<S> list = new ArrayList<S>();
        for (S entity : entities) {
            list.add(this.save(entity));
        }
        return list;
    }

    public void update(T entity) {
        this.updateInser(Query.query(Criteria.where("_id").is(entity.getId())), this.entity2Update(entity));
    }

    private Update entity2Update(T entity) {
        Update update = new Update();

        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");

        Field[] fields = entity.getClass().getDeclaredFields();

        for (Field field : fields) {
            field.setAccessible(true);
            String key = field.getName();
            Object value = null;
            try {
                value = field.get(entity);
            } catch (Exception e) {
                e.printStackTrace();
            }
            if (value instanceof Date) {
                value = simpleDateFormat.format(value);
            }
            update.set(key, value);
        }

        return update;
    }

    public void updateInser(Query query, Update update) {
        this.mongoTemplate.upsert(query, update, this.className());
    }

    public void updateFirst(Query query, Update update) {
        this.mongoTemplate.updateFirst(query, update, this.className());
    }

    public void updateMulti(Query query, Update update) {
        this.mongoTemplate.updateMulti(query, update, this.className());
    }

    @Override
    public T findOne(ID id) {
        return this.mongoTemplate.findById(id, this.className());
    }

    @Override
    public List<T> findAll() {
        return this.mongoTemplate.findAll(this.className());
    }

    public List<T> findAll(Query query) {
        return this.mongoTemplate.find(query, this.className());
    }

    @Override
    public Iterable<T> findAll(Iterable<ID> ids) {
        return this.findAll(Query.query(Criteria.where("_id").in((Collection<ID>) ids)));
    }

    public List<T> findAll(List<ID> ids) {
        return (List<T>) this.findAll((Iterable<ID>) ids);
    }

    @Override
    public List<T> findAll(Sort sort) {
        return this.findAll(new Query().with(sort));
    }

    public List<T> findAllASC(String key) {
        return this.findAll(new Sort(Sort.Direction.ASC, key));
    }

    public List<T> findAllDESC(String key) {
        return this.findAll(new Sort(Sort.Direction.DESC, key));
    }

    @Override
    public Page<T> findAll(Pageable pageable) {
        List<T> content = this.findAll(new Query().with(pageable));
        long total = this.count();
        return new PageImpl<T>(content, pageable, total);
    }

    @Override
    public boolean exists(ID id) {
        if (null != this.findOne(id)) {
            return true;
        }
        return false;
    }

    @Override
    public long count() {
        return this.findAll().size();
    }

    public long count(Query query) {
        return this.mongoTemplate.count(query, this.className());
    }

    @Override
    public void delete(ID id) {
        this.mongoTemplate.remove(this.findOne(id));
    }

    public void delete(List<ID> ids) {
        for (ID id : ids) {
            this.delete(id);
        }
    }

    @Override
    public void delete(T entity) {
        this.mongoTemplate.remove(entity);
    }

    @Override
    public void delete(Iterable<? extends T> entities) {
        for (T entity : entities) {
            this.delete(entity);
        }
    }

    @Override
    public void deleteAll() {
        List<T> entities = this.findAll();
        for (T entity : entities) {
            this.delete(entity);
        }
    }

//    protected abstract Class<T> className();

    private Class<T> className() {
        return (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];
    }

}